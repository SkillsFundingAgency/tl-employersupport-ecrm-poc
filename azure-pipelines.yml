# Build, test and deploy the T Levels Zendesk-ECRM POC
name: tl-employersupport-ecrm-poc
trigger:
- main

variables:
  - name: buildConfiguration
    value: 'Release'
  - group: tl-zd-ecrm-poc-deployment
  - group: tl-zd-ecrm-poc-vars

stages:
- stage: Build
  jobs:
  - job: Build
    displayName: 'Build'
    pool:
      vmImage: 'ubuntu-latest'

    steps:    
    - task: UseDotNet@2 
      displayName: 'Install .NET Core 3.1.x SDK'
      enabled: true
      inputs:
        version: '3.1.x'
        packageType: sdk

    - task: UseDotNet@2
      displayName: 'Install .Net SDK'
      inputs:
        packageType: 'sdk'
        version: '5.0.x'

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/tl.employersupport.ecrm.poc.*.csproj'
        noCache: true

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '**/tl.employersupport.ecrm.poc.*.csproj'
        arguments: '--configuration $(buildConfiguration)  --no-restore'        

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: test
        projects: '**/*.[uU]nit[tT]ests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Function App'
      enabled: true
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/*.[Ff]unctions.csproj'
        arguments: >-
          --configuration $(buildConfiguration) 
          --output $(build.artifactstagingdirectory)/publish 
          --no-restore

    - task: CopyFiles@2
      displayName: 'Copy Azure deployment files to: $(build.artifactstagingdirectory)'
      inputs:
        Contents: azure/**
        TargetFolder: '$(build.artifactstagingdirectory)'
        OverWrite: true

    - task: CopyFiles@2
      displayName: 'Copy Logic App deployment templates to: $(build.artifactstagingdirectory)'
      inputs:
        Contents: | 
          **/tl.employersupport.ecrm.poc.application.logic/*.json
          !**/*.parameters.json
        TargetFolder: '$(build.artifactstagingdirectory)'
        OverWrite: true

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(build.artifactstagingdirectory)' 
        artifactName: 'tl-emp-ecrm-poc'

- stage: Deploy
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'tl-poc-env'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: AzureResourceGroupDeployment@2
            displayName: 'Deploy ARM templates'
            inputs:
              azureSubscription: 'ARM Subscription'
              location: $(ResourceLocation)
              resourceGroupName: '$(ResourceIdentifier)-rg'
              action: 'Create Or Update Resource Group'
              csmFile: '$(Pipeline.Workspace)/**/azure/armTemplate.json'
              overrideParameters: >-
                -resourceIdentifier "$(ResourceIdentifier)" 
                -resourceEnvironmentName "$(ResourceEnvironmentName)" 
                -govNotifyApiKey "$(GovNotifyApiKey)" 
                -supportEmailAddress "$(SupportEmailAddress)" 
                -zendeskTicketCreatedEmailTemplateId "$(ZendeskTicketCreatedEmailTemplateId)"
                -zendeskAuthenticationMethod "$(ZendeskAuthenticationMethod)"
                -zendeskApiBaseUri "$(ZendeskApiBaseUri)"
                -zendeskApiToken "$(ZendeskApiToken)"
                -zendeskUser "$(ZendeskUser)"
                -ecrmApiBaseUri "$(EcrmApiBaseUri)"
                -ecrmApiKey "$(EcrmApiKey)"
                -ecrmODataApiUri "$(EcrmODataApiUri)"
                -ecrmODataApiVersion "$(EcrmODataApiVersion)"
                -ecrmClientId "$(EcrmClientId)"
                -ecrmClientSecret "$(EcrmClientSecret)"
                -ecrmTenant "$(EcrmTenant)"
              deploymentOutputs: DeploymentOutputs
          
          - bash: | 
              FunctionAppNameValue="$(DeploymentOutputs.functionAppName.value)"
              echo "##vso[task.setvariable variable=functionAppName]$FunctionAppNameValue"
              ServiceBusNamespaceNameValue="$(DeploymentOutputs.ServiceBusNamespaceName.value)"
              echo "##vso[task.setvariable variable=serviceBusNamespaceName]$ServiceBusNamespaceNameValue"
              ServiceBusConnectionNameValue="$(DeploymentOutputs.serviceBusConnectionName.value)"
              echo "##vso[task.setvariable variable=serviceBusConnectionName]$ServiceBusConnectionNameValue"
            displayName: 'Copy ARM output variables'

          - script: echo "functionAppName=" $(functionAppName)
            displayName: 'Show function app name variable'
          - script: echo "serviceBusNamespaceName=" $(serviceBusNamespaceName)
            displayName: 'Show service bus name variable'
          - script: echo "serviceBusConnectionName=" $(serviceBusConnectionName)
            displayName: 'Show service bus connection name variable'

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Function App'
            inputs:
              azureSubscription: 'ARM Subscription'
              appType: functionApp
              WebAppName: $(functionAppName)
              packageForLinux: '$(Pipeline.Workspace)/**/publish/tl.employersupport.ecrm.poc.functions.zip'
              
          - task: AzureResourceGroupDeployment@2
            displayName: 'Deploy Service bus triggerred Logic App'
            inputs:
              azureSubscription: 'ARM Subscription'
              location: $(ResourceLocation)
              resourceGroupName: '$(ResourceIdentifier)-rg'
              action: 'Create Or Update Resource Group'
              csmFile: '$(Pipeline.Workspace)/**/tl.employersupport.ecrm.poc.application.logic/ServiceBusTriggerredWorkflow.json'
              overrideParameters: >-
                -logicAppName "ServiceBus Logic App" 
                -servicebus_1_Connection_Name "$(serviceBusConnectionName)"
